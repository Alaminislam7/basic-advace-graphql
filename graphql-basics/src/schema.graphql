    type Query {
        users(query: String): [User!]!
        posts: [Post!]!
        post: Post!
        comments: [Comment!]!
    }
    type Mutation{
        createUser(data: CreateUserInput!): User!
        deleteUser(id: ID!): User!
        updateUser(id: ID!, data: UpdateUserInput!): User!
        createPost(data: CreatePostInput!): Post!
        deletePost(id: ID!): Post!
        updatePost(id: ID!, data: UpdatePostInput!): Post!
        createComment(data: CreateCommentInput!): Comment!
        deletecomment(id: ID!): Comment!
        updateComment(id: ID!, data: UpdateCommentInput!): Comment!
    }
    type Subscription{
        comment(postId: ID!) : CommentSubscriptionPayload!
        post: PostSubscriptionPayload!
    }

    input CreateUserInput{
        name: String!,
        email: String!,
        age: Int
    }
    input UpdateUserInput{
        name: String!,
        email: String!,
        age: Int!
    }
    input UpdatePostInput{
        title: String!,
        body: String!, 
        published: Boolean!
    }
    input CreatePostInput{
        title: String!,
        body: String!, 
        published: Boolean!
        author: ID!
    }
    input UpdateCommentInput{
        title: String!
    }
    input CreateCommentInput{
        title: String!, 
        author: ID!, 
        post: ID!
    }

    type User {
        id: ID
        name: String
        email: String
        age: Int
        post: [Post!]!
        comments: [Comment!]!
    }
    type Post {
        id: ID!
        title: ID!
        author: User!
        comments: [Comment!]!
    }
    type Comment {
        id: ID!
        title: String!
        author: User!
        post: Post!
    }
    enum MutationType {
        CREATED
        UPDATED
        DELETED
    }
    type PostSubscriptionPayload {
        mutation: MutationType!
        data: Post!
    }
    type CommentSubscriptionPayload {
        mutation: MutationType!
        data: Comment!
    }